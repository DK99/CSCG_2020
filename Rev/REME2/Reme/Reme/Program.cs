using System;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace Reme
{
    class Program
    {
        static void Main(string[] args)
        {
			string flag1 = (Decrypt("D/T9XRgUcKDjgXEldEzeEsVjIcqUTl7047pPaw7DZ9I="));

			Console.WriteLine("There you go. Thats the first of the two flags! CSCG{{{0}}}", flag1);

			byte[] ilasByteArray = new byte[] { 0x00, 0x28, 0x10, 0x00, 0x00, 0x06, 0x00, 0x28, 0x2F, 0x00, 0x00, 0x0A, 0x0C, 0x08, 0x2C, 0x14, 0x00, 0x72, 0xC3, 0x00, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x17, 0x0A, 0x28, 0x32, 0x00, 0x00, 0x0A, 0x6F, 0x33, 0x00, 0x00, 0x0A, 0x12, 0x00, 0x28, 0x08, 0x00, 0x00, 0x06, 0x26, 0x06, 0x0D, 0x09, 0x2C, 0x14, 0x00, 0x72, 0xC3, 0x00, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x28, 0x09, 0x00, 0x00, 0x06, 0x13, 0x04, 0x11, 0x04, 0x2C, 0x14, 0x00, 0x72, 0xC3, 0x00, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02, 0x8E, 0x16, 0xFE, 0x01, 0x13, 0x05, 0x11, 0x05, 0x2C, 0x14, 0x00, 0x72, 0xCD, 0x00, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x02, 0x16, 0x9A, 0x72, 0x11, 0x01, 0x00, 0x70, 0x28, 0x13, 0x00, 0x00, 0x06, 0x28, 0x34, 0x00, 0x00, 0x0A, 0x13, 0x06, 0x11, 0x06, 0x2C, 0x16, 0x00, 0x72, 0xC3, 0x00, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x2B, 0x10, 0x00, 0x72, 0x6B, 0x01, 0x00, 0x70, 0x02, 0x16, 0x9A, 0x28, 0x35, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x72, 0xE3, 0x01, 0x00, 0x70, 0x28, 0x0A, 0x00, 0x00, 0x06, 0x0B, 0x07, 0x7E, 0x36, 0x00, 0x00, 0x0A, 0x28, 0x37, 0x00, 0x00, 0x0A, 0x13, 0x07, 0x11, 0x07, 0x2C, 0x37, 0x00, 0x07, 0x72, 0xFD, 0x01, 0x00, 0x70, 0x28, 0x0B, 0x00, 0x00, 0x06, 0x13, 0x08, 0x11, 0x08, 0x28, 0x38, 0x00, 0x00, 0x0A, 0x20, 0xE9, 0x00, 0x00, 0x00, 0xFE, 0x01, 0x13, 0x09, 0x11, 0x09, 0x2C, 0x14, 0x00, 0x72, 0x33, 0x02, 0x00, 0x70, 0x28, 0x30, 0x00, 0x00, 0x0A, 0x00, 0x15, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x2A };

			byte[] array = File.ReadAllBytes(@"C:\Users\Daniel\Desktop\REME1\ReMe.dll");
			int[] array2 = array.Locate(Encoding.ASCII.GetBytes("THIS_IS_CSCG_NOT_A_MALWARE!"));
			MemoryStream memoryStream = new MemoryStream(array);
			memoryStream.Seek((long)(array2[0] + Encoding.ASCII.GetBytes("THIS_IS_CSCG_NOT_A_MALWARE!").Length), SeekOrigin.Begin);
			byte[] array3 = new byte[memoryStream.Length - memoryStream.Position];
			memoryStream.Read(array3, 0, array3.Length);
			byte[] rawAssembly = Program.AES_Decrypt(array3, ilasByteArray);

			Assembly assembly = Assembly.Load(rawAssembly);

			using (FileStream fileStream = new FileStream(@"C:\Users\Daniel\Desktop\REME1\inner.dll", FileMode.Create))
			{
				// Write the data to the file, byte by byte.
				for (int i = 0; i < rawAssembly.Length; i++)
				{
					fileStream.WriteByte(rawAssembly[i]);
				}
			}

			object obj = assembly.GetTypes()[0].GetMethod("Check", BindingFlags.Static | BindingFlags.Public).Invoke(null, new object[]
			{
				args
			});
			Console.WriteLine(assembly.GetTypes()[0]);


			Console.ReadLine();
        }

		public static string Decrypt(string cipherText)
		{
			string password = "A_Wise_Man_Once_Told_Me_Obfuscation_Is_Useless_Anyway";
			cipherText = cipherText.Replace(" ", "+");
			byte[] array = Convert.FromBase64String(cipherText);
			using (Aes aes = Aes.Create())
			{
				Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(password, new byte[]
				{
					73,
					118,
					97,
					110,
					32,
					77,
					101,
					100,
					118,
					101,
					100,
					101,
					118
				});
				aes.Key = rfc2898DeriveBytes.GetBytes(32);
				aes.IV = rfc2898DeriveBytes.GetBytes(16);
				using (MemoryStream memoryStream = new MemoryStream())
				{
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Write))
					{
						cryptoStream.Write(array, 0, array.Length);
						cryptoStream.Close();
					}
					cipherText = Encoding.Unicode.GetString(memoryStream.ToArray());
				}
			}
			return cipherText;
		}

		public static byte[] AES_Decrypt(byte[] bytesToBeDecrypted, byte[] passwordBytes)
		{
			byte[] result = null;
			byte[] salt = new byte[]
			{
		1,
		2,
		3,
		4,
		5,
		6,
		7,
		8
			};
			using (MemoryStream memoryStream = new MemoryStream())
			{
				using (RijndaelManaged rijndaelManaged = new RijndaelManaged())
				{
					rijndaelManaged.KeySize = 256;
					rijndaelManaged.BlockSize = 128;
					Rfc2898DeriveBytes rfc2898DeriveBytes = new Rfc2898DeriveBytes(passwordBytes, salt, 1000);
					rijndaelManaged.Key = rfc2898DeriveBytes.GetBytes(rijndaelManaged.KeySize / 8);
					rijndaelManaged.IV = rfc2898DeriveBytes.GetBytes(rijndaelManaged.BlockSize / 8);
					rijndaelManaged.Mode = CipherMode.CBC;
					using (CryptoStream cryptoStream = new CryptoStream(memoryStream, rijndaelManaged.CreateDecryptor(), CryptoStreamMode.Write))
					{
						cryptoStream.Write(bytesToBeDecrypted, 0, bytesToBeDecrypted.Length);
						cryptoStream.Close();
					}
					result = memoryStream.ToArray();
				}
			}
			return result;
		}
	}
}
